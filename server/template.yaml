AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  simple-websockets-chat-app

  SAM Template for simple-websockets-chat-app that has the DynamoDB table and Lambda
  functions needed to demonstrate the Websocket protocol on API Gateway.

Parameters:
  DeploymentS3BucketName:
    Type: String
    Description: The name of the S3 bucket in which the Swagger specification is stored
  StageName:
    Type: String
    Description: The name of the stage, e.g. "dev", "preprod", "prod"
    Default: dev
  AppName:
    Type: String
    Description: The name of the APP
    Default: vlim-lambda-microservices
  VersionName:
    Type: String
    Description: The version of the APP
    Default: vi
  SecretKey:
    Type: String
    Description: The name of the APP
    Default: 62fec8f63ccfeeb60149f4c49fbcda10
  BOTTOKEN:
    Type: String
    Description: The token of the telegram bot [VLIMServerLogsBot]
    Default: 1425139424:AAGS4IP3fvntbuiR3Mrjf4o3ZV3nK2Pvhrg
  IsUsingLocalDynamodb:
    Type: String
    Default: '0'
    Description: A flag to turn the service to use local dynamodb or on cloud
    AllowedPattern: \d+$
  ConnectionTableName:
    Type: String
#    Default: 'vlim_ws_chat_dev_conns_table'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  UserMessageTableName:
    Type: String
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z-_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'

Globals:
  Function:
    Timeout: 60
    Environment:
      Variables:
        SECRET_KEY: !Sub "${SecretKey}"
        IS_USING_LOCAL_DYNAMODB: !Sub "${IsUsingLocalDynamodb}"
        CONNECTION_TABLE_NAME: !Ref ConnectionTableName
        USER_MESSAGE_TABLE_NAME: !Ref UserMessageTableName


Resources:
  SimpleChatWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${AppName}-${StageName}-SimpleChatWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations

  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SendInteg

  SendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - SendRoute
      - ConfigRoute
      - DisconnectRoute
      - DefaultRoute
    Properties:
      ApiId: !Ref SimpleChatWebSocket

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName:
        Fn::Sub: ${StageName}-${VersionName}
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref SimpleChatWebSocket

  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "connectionId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "connectionId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref ConnectionTableName

  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: onconnect/
      Handler: app.handler
      MemorySize: 128
      Runtime: python3.8
      Layers:
        - !Ref PythonLibs
        - !Ref CoreLibs
      Environment:
        Variables:
          TABLE_NAME: !Ref ConnectionTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionTableName
        - Statement:
          - Effect: Allow
            Action:
              - 'execute-api:ManageConnections'
            Resource:
              - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/*'

  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com
  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ondisconnect/
      Handler: app.handler
      MemorySize: 128
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME: !Ref ConnectionTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionTableName
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com
  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: pysendmessage/
      Handler: app.handler
      MemorySize: 128
      Runtime: python3.8
      Layers:
        - !Ref PythonLibs
        - !Ref CoreLibs
      Environment:
        Variables:
          CONNECTION_TABLE_NAME: !Ref ConnectionTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref UserMessageTableName
        - Statement:
          - Effect: Allow
            Action:
              - 'execute-api:ManageConnections'
            Resource:
              - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/*'
  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageFunction
      Principal: apigateway.amazonaws.com


  # Configing Message
  ConfigRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: configuration
      AuthorizationType: NONE
      OperationName: ConfigRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConfigIntegration


  ConfigIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Config Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfigFunction.Arn}/invocations


  ConfigFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppName}-${StageName}-ConfigFunction
      CodeUri: configuration/
      Handler: app.handler
      MemorySize: 128
      Runtime: python3.8
      Environment:
        Variables:
          CONNECTION_TABLE_NAME: !Ref ConnectionTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionTableName
        - Statement:
          - Effect: Allow
            Action:
              - 'execute-api:ManageConnections'
            Resource:
              - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/*'
      Layers:
        - !Ref PythonLibs
        - !Ref CoreLibs


  ConfigPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ConfigFunction.Arn
      Principal: apigateway.amazonaws.com


  # Default route
  OnDefaultFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ondefault/
      Handler: app.handler
      MemorySize: 128
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME: !Ref ConnectionTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionTableName
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/*'

  OnDefaultPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDefaultFunction
      Principal: apigateway.amazonaws.com

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DefaultInteg
  DefaultInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Default Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDefaultFunction.Arn}/invocations



  NodeCoreLibs:
    Type: "AWS::Serverless::LayerVersion"
    Properties:
      ContentUri: core/
      CompatibleRuntimes: # optional
        - nodejs12.x

  NodeDependencies:
    Type: "AWS::Serverless::LayerVersion"
    Properties:
      ContentUri: dependencies/
      CompatibleRuntimes: # optional
        - nodejs12.x

  CoreLibs:
    Type: 'AWS::Serverless::LayerVersion'
    Properties:
      ContentUri: layer/core
      CompatibleRuntimes: # optional
        - python3.8

  PythonLibs:
    Type: 'AWS::Serverless::LayerVersion'
    Properties:
      ContentUri: layer/python_libs
      CompatibleRuntimes: # optional
        - python3.8


Outputs:
  ConnectionsTableArn:
    Description: "Connections table ARN"
    Value: !GetAtt ConnectionsTable.Arn

  OnConnectFunctionArn:
    Description: "OnConnect function ARN"
    Value: !GetAtt OnConnectFunction.Arn

  OnDisconnectFunctionArn:
    Description: "OnDisconnect function ARN"
    Value: !GetAtt OnDisconnectFunction.Arn

  SendMessageFunctionArn:
    Description: "SendMessage function ARN"
    Value: !GetAtt SendMessageFunction.Arn


  ConfigFunctionArn:
    Description: "Config function ARN"
    Value: !GetAtt ConfigFunction.Arn

  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Join [ '', [ 'wss://', !Ref SimpleChatWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage' ] ]
